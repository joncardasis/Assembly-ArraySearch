; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\Desktop\CIS 310\Assignment 3\Assignment3\windows32\framework.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	__hInstance:DWORD
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	_DlgProc@16
PUBLIC	_getInput
PUBLIC	_showOutput
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_07KGMMFLDN@Warning?$AA@			; `string'
PUBLIC	??_C@_0BA@KGPGJABH@Nothing?5entered?$AA@	; `string'
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__DialogBoxParamA@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__GetDlgItemTextA@16:PROC
EXTRN	__imp__GetWindowTextLengthA@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_MainProc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
_buf	DB	0ffH DUP (?)
	ALIGN	4

_inputLabel DB	0ffH DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BA@KGPGJABH@Nothing?5entered?$AA@
CONST	SEGMENT
??_C@_0BA@KGPGJABH@Nothing?5entered?$AA@ DB 'Nothing entered', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KGMMFLDN@Warning?$AA@
CONST	SEGMENT
??_C@_07KGMMFLDN@Warning?$AA@ DB 'Warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\cis 310\assignment 3\assignment3\windows32\framework.c
;	COMDAT _showOutput
_TEXT	SEGMENT
_outputLabel$ = 8					; size = 4
_outputString$ = 12					; size = 4
_showOutput PROC					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 70   : 	MessageBox(NULL, outputString, outputLabel, MB_OK);

  0001e	8b f4		 mov	 esi, esp
  00020	6a 00		 push	 0
  00022	8b 45 08	 mov	 eax, DWORD PTR _outputLabel$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _outputString$[ebp]
  00029	51		 push	 ecx
  0002a	6a 00		 push	 0
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 71   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_showOutput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\cis 310\assignment 3\assignment3\windows32\framework.c
;	COMDAT _getInput
_TEXT	SEGMENT
$T1 = -200						; size = 4
_inputPrompt$ = 8					; size = 4
_result$ = 12						; size = 4
_maxChars$ = 16						; size = 4
_getInput PROC						; COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 59   : 	strcpy(inputLabel, inputPrompt);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _inputPrompt$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET _inputLabel
  00027	e8 00 00 00 00	 call	 _strcpy
  0002c	83 c4 08	 add	 esp, 8

; 60   : 	DialogBox(_hInstance, MAKEINTRESOURCE(IDD_MAIN), NULL, DlgProc);

  0002f	8b f4		 mov	 esi, esp
  00031	6a 00		 push	 0
  00033	68 00 00 00 00	 push	 OFFSET _DlgProc@16
  00038	6a 00		 push	 0
  0003a	6a 65		 push	 101			; 00000065H
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR __hInstance
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DialogBoxParamA@20
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 61   : 	buf[maxChars-1] = '\0'; // in case too many characters, terminate string at maxChars

  0004f	8b 45 10	 mov	 eax, DWORD PTR _maxChars$[ebp]
  00052	83 e8 01	 sub	 eax, 1
  00055	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0005b	81 bd 38 ff ff
	ff ff 00 00 00	 cmp	 DWORD PTR $T1[ebp], 255	; 000000ffH
  00065	73 02		 jae	 SHORT $LN3@getInput
  00067	eb 05		 jmp	 SHORT $LN4@getInput
$LN3@getInput:
  00069	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@getInput:
  0006e	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00074	c6 81 00 00 00
	00 00		 mov	 BYTE PTR _buf[ecx], 0

; 62   : 	strcpy(result, buf);

  0007b	68 00 00 00 00	 push	 OFFSET _buf
  00080	8b 45 0c	 mov	 eax, DWORD PTR _result$[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _strcpy
  00089	83 c4 08	 add	 esp, 8
$LN2@getInput:

; 63   : 	return;
; 64   : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_getInput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\cis 310\assignment 3\assignment3\windows32\framework.c
;	COMDAT _DlgProc@16
_TEXT	SEGMENT
tv74 = -208						; size = 4
tv64 = -208						; size = 4
_len$1 = -8						; size = 4
_hwnd$ = 8						; size = 4
_Message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_DlgProc@16 PROC					; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 11   : 	switch(Message)

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  00021	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00027	83 bd 30 ff ff
	ff 10		 cmp	 DWORD PTR tv64[ebp], 16	; 00000010H
  0002e	0f 84 0b 01 00
	00		 je	 $LN11@DlgProc
  00034	81 bd 30 ff ff
	ff 10 01 00 00	 cmp	 DWORD PTR tv64[ebp], 272 ; 00000110H
  0003e	74 11		 je	 SHORT $LN6@DlgProc
  00040	81 bd 30 ff ff
	ff 11 01 00 00	 cmp	 DWORD PTR tv64[ebp], 273 ; 00000111H
  0004a	74 44		 je	 SHORT $LN7@DlgProc
  0004c	e9 05 01 00 00	 jmp	 $LN12@DlgProc
$LN6@DlgProc:

; 12   : 	{
; 13   : 		case WM_INITDIALOG:
; 14   : 			// set up the dialog box
; 15   : 			SetDlgItemText(hwnd, IDC_LABEL, inputLabel);

  00051	8b f4		 mov	 esi, esp
  00053	68 00 00 00 00	 push	 OFFSET _inputLabel
  00058	68 f1 03 00 00	 push	 1009			; 000003f1H
  0005d	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 			SetDlgItemText(hwnd, IDC_TEXT, "");

  0006e	8b f4		 mov	 esi, esp
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00075	68 e8 03 00 00	 push	 1000			; 000003e8H
  0007a	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12
  00084	3b f4		 cmp	 esi, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 17   : 		break;

  0008b	e9 ca 00 00 00	 jmp	 $LN2@DlgProc
$LN7@DlgProc:

; 18   : 
; 19   : 		case WM_COMMAND:
; 20   : 			switch(LOWORD(wParam))

  00090	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  00093	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00098	0f b7 c8	 movzx	 ecx, ax
  0009b	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], ecx
  000a1	81 bd 30 ff ff
	ff ef 03 00 00	 cmp	 DWORD PTR tv74[ebp], 1007 ; 000003efH
  000ab	74 05		 je	 SHORT $LN8@DlgProc
  000ad	e9 8b 00 00 00	 jmp	 $LN4@DlgProc
$LN8@DlgProc:

; 21   : 			{
; 22   : 				case IDC_OK:
; 23   : 				{
; 24   : 					// When somebody clicks OK, get the number of characters entered
; 25   : 					int len = GetWindowTextLength(GetDlgItem(hwnd, IDC_TEXT));

  000b2	8b f4		 mov	 esi, esp
  000b4	68 e8 03 00 00	 push	 1000			; 000003e8H
  000b9	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  000bc	50		 push	 eax
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b f4		 mov	 esi, esp
  000cc	50		 push	 eax
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowTextLengthA@4
  000d3	3b f4		 cmp	 esi, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	89 45 f8	 mov	 DWORD PTR _len$1[ebp], eax

; 26   : 					if(len > 0)

  000dd	83 7d f8 00	 cmp	 DWORD PTR _len$1[ebp], 0
  000e1	7e 3b		 jle	 SHORT $LN9@DlgProc

; 27   : 					{
; 28   : 						// get the string into our buffer and exit
; 29   : 						GetDlgItemText(hwnd, IDC_TEXT, buf, len + 1);

  000e3	8b 45 f8	 mov	 eax, DWORD PTR _len$1[ebp]
  000e6	83 c0 01	 add	 eax, 1
  000e9	8b f4		 mov	 esi, esp
  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET _buf
  000f1	68 e8 03 00 00	 push	 1000			; 000003e8H
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  000f9	51		 push	 ecx
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16
  00100	3b f4		 cmp	 esi, esp
  00102	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   : 						EndDialog(hwnd, 0);

  00107	8b f4		 mov	 esi, esp
  00109	6a 00		 push	 0
  0010b	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0010e	50		 push	 eax
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  00115	3b f4		 cmp	 esi, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 					}

  0011c	eb 1f		 jmp	 SHORT $LN4@DlgProc
$LN9@DlgProc:

; 32   : 					else 
; 33   : 					{
; 34   : 						MessageBox(hwnd, "Nothing entered", "Warning", MB_OK);

  0011e	8b f4		 mov	 esi, esp
  00120	6a 00		 push	 0
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_07KGMMFLDN@Warning?$AA@
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KGPGJABH@Nothing?5entered?$AA@
  0012c	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  0012f	50		 push	 eax
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00136	3b f4		 cmp	 esi, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@DlgProc:

; 35   : 					}
; 36   : 				}
; 37   : 				break;
; 38   : 			}
; 39   : 		break;

  0013d	eb 1b		 jmp	 SHORT $LN2@DlgProc
$LN11@DlgProc:

; 40   : 
; 41   : 		case WM_CLOSE:
; 42   : 			EndDialog(hwnd, 0);

  0013f	8b f4		 mov	 esi, esp
  00141	6a 00		 push	 0
  00143	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00146	50		 push	 eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndDialog@8
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 43   : 		break;

  00154	eb 04		 jmp	 SHORT $LN2@DlgProc
$LN12@DlgProc:

; 44   : 
; 45   : 		default:
; 46   : 			return FALSE;

  00156	33 c0		 xor	 eax, eax
  00158	eb 05		 jmp	 SHORT $LN1@DlgProc
$LN2@DlgProc:

; 47   : 	}
; 48   : 	return TRUE;

  0015a	b8 01 00 00 00	 mov	 eax, 1
$LN1@DlgProc:

; 49   : }

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00168	3b ec		 cmp	 ebp, esp
  0016a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 10 00	 ret	 16			; 00000010H
_DlgProc@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\cis 310\assignment 3\assignment3\windows32\framework.c
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 79   : 	_hInstance = hInstance;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _hInstance$[ebp]
  00021	a3 00 00 00 00	 mov	 DWORD PTR __hInstance, eax

; 80   : 	return MainProc();

  00026	e8 00 00 00 00	 call	 _MainProc

; 81   : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
